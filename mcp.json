{
  "mcpServers": {
    "postgres": {
      "command": "npx",
      "args": [
        "-y",
        "@henkey/postgres-mcp-server",
        "--connection-string",
        "postgresql://postgres.zfbgdixbzezpxllkoyfc:fq5MNcF00F8P7DqY@aws-0-us-east-1.pooler.supabase.com:6543/postgres"
      ]
    },
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp"],
      "env": {}
    },
    "brave-search": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search@latest"
      ],
      "env": {
        "BRAVE_API_KEY": "YOUR_BRAVE_API_KEY_HERE"
      }
    },
    "memory": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory@latest"
      ]
    },
    "fetch": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-fetch@latest"
      ]
    },
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/root/repo"
      ]
    },
    "sentry": {
      "command": "npx",
      "args": ["-y", "@sentry/mcp-server"],
      "env": {
        "SENTRY_ORG_TOKEN": "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",
        "SENTRY_USER_TOKEN": "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"
      }
    },
    "github": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github@latest"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "YOUR_GITHUB_TOKEN_HERE"
      }
    },
    "supabase-admin": {
      "command": "npx",
      "args": [
        "-y",
        "@supabase/mcp-server-supabase@latest"
      ],
      "env": {
        "SUPABASE_URL": "https://qzvfufadiqmizrozejci.supabase.co",
        "SUPABASE_SERVICE_ROLE_KEY": "${SUPABASE_SERVICE_ROLE_KEY}",
        "SUPABASE_ACCESS_TOKEN": "${SUPABASE_ACCESS_TOKEN}",
        "SUPABASE_PROJECT_REF": "qzvfufadiqmizrozejci",
        "SUPABASE_ADMIN_MODE": "true",
        "SUPABASE_READ_ONLY": "false",
        "SUPABASE_ENABLE_FUNCTIONS": "true",
        "SUPABASE_ENABLE_MIGRATIONS": "true",
        "SUPABASE_ENABLE_STORAGE": "true"
      }
    },
    "supabase-cli": {
      "command": "npx",
      "args": [
        "-y",
        "supabase@latest"
      ],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "${SUPABASE_ACCESS_TOKEN}",
        "SUPABASE_PROJECT_ID": "qzvfufadiqmizrozejci",
        "SUPABASE_URL": "https://qzvfufadiqmizrozejci.supabase.co",
        "SUPABASE_SERVICE_ROLE_KEY": "${SUPABASE_SERVICE_ROLE_KEY}",
        "SUPABASE_ANON_KEY": "sb_publishable_mzJORjzXGOboCWSdwDJPkw__LX9UgLS"
      }
    },
    "deno": {
      "command": "npx",
      "args": [
        "-y",
        "@deno/shim-deno@latest"
      ],
      "env": {
        "DENO_DEPLOY_TOKEN": "YOUR_DENO_DEPLOY_TOKEN",
        "SUPABASE_ACCESS_TOKEN": "${SUPABASE_ACCESS_TOKEN}",
        "DENO_DIR": "/tmp/deno_cache"
      }
    },
    "typescript": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-typescript@latest"
      ],
      "args_extra": [
        "/root/repo"
      ]
    },
    "supabase-functions": {
      "command": "node",
      "args": [
        "-e",
        "const { spawn } = require('child_process'); const args = process.argv.slice(2); const child = spawn('npx', ['supabase', 'functions', ...args], { stdio: 'inherit', env: { ...process.env, SUPABASE_ACCESS_TOKEN: process.env.SUPABASE_ACCESS_TOKEN, SUPABASE_PROJECT_REF: 'qzvfufadiqmizrozejci' } }); child.on('exit', process.exit);"
      ],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "${SUPABASE_ACCESS_TOKEN}",
        "SUPABASE_PROJECT_REF": "qzvfufadiqmizrozejci",
        "SUPABASE_URL": "https://qzvfufadiqmizrozejci.supabase.co"
      }
    },
    "supabase-db": {
      "command": "node",
      "args": [
        "-e",
        "const { spawn } = require('child_process'); const args = process.argv.slice(2); const child = spawn('npx', ['supabase', 'db', ...args], { stdio: 'inherit', env: { ...process.env, SUPABASE_ACCESS_TOKEN: process.env.SUPABASE_ACCESS_TOKEN, SUPABASE_PROJECT_REF: 'qzvfufadiqmizrozejci' } }); child.on('exit', process.exit);"
      ],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "${SUPABASE_ACCESS_TOKEN}",
        "SUPABASE_PROJECT_REF": "qzvfufadiqmizrozejci",
        "SUPABASE_URL": "https://qzvfufadiqmizrozejci.supabase.co"
      }
    },
    "netlify-cli": {
      "command": "npx",
      "args": [
        "-y",
        "netlify-cli@latest"
      ],
      "env": {
        "NETLIFY_AUTH_TOKEN": "${NETLIFY_AUTH_TOKEN}",
        "NETLIFY_SITE_ID": "${NETLIFY_SITE_ID}"
      }
    },
    "git": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-git@latest"
      ],
      "args_extra": [
        "/root/repo"
      ]
    },
    "slack": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-slack@latest"
      ],
      "env": {
        "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}",
        "SLACK_TEAM_ID": "${SLACK_TEAM_ID}"
      }
    },
    "aws": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-aws@latest"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
        "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}",
        "AWS_DEFAULT_REGION": "us-east-1"
      }
    },
    "docker": {
      "command": "npx",
      "args": ["-y", "docker-mcp"]
    },
    "docker-alt": {
      "command": "npx",
      "args": ["-y", "@edjl/docker-mcp"]
    },
    "puppeteer": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer@latest"
      ],
      "env": {
        "PUPPETEER_HEADLESS": "true"
      }
    },
    "everart": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everart@latest"
      ],
      "env": {
        "EVERART_API_KEY": "${EVERART_API_KEY}"
      }
    },
    "testsprite": {
      "command": "npx",
      "args": ["@testsprite/testsprite-mcp@latest"],
      "env": {
        "API_KEY": "demo-key"
      }
    },
    "notion": {
      "command": "npx",
      "args": ["-y", "@notionhq/notion-mcp-server"],
      "env": {
        "NOTION_API_KEY": "your-notion-api-key-here"
      }
    },
    "storybook": {
      "command": "npx",
      "args": ["-y", "storybook-mcp"]
    },
    "storybook-alt": {
      "command": "npx",
      "args": ["-y", "@akfm/storybook-mcp"]
    },
    "kubernetes": {
      "command": "npx",
      "args": ["-y", "mcp-server-kubernetes"]
    },
    "eslint": {
      "command": "npx",
      "args": ["-y", "@eslint/mcp"]
    },
    "eslint-server": {
      "command": "npx",
      "args": ["-y", "eslint-mcp-server"]
    },
    "terraform": {
      "command": "npx",
      "args": ["-y", "terraform-mcp-server"]
    },
    "it-tools": {
      "command": "npx",
      "args": ["-y", "it-tools-mcp"]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
    },
    "figma": {
      "command": "npx",
      "args": ["-y", "figma-mcp"],
      "env": {
        "FIGMA_ACCESS_TOKEN": "${FIGMA_ACCESS_TOKEN}"
      }
    },
    "elasticsearch": {
      "command": "npx",
      "args": ["-y", "elasticsearch-mcp"],
      "env": {
        "ELASTIC_CLOUD_ID": "${ELASTIC_CLOUD_ID}",
        "ELASTIC_USERNAME": "${ELASTIC_USERNAME}",
        "ELASTIC_PASSWORD": "${ELASTIC_PASSWORD}"
      }
    }
  }
}